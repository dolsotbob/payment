/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MyForwarder, MyForwarderInterface } from "../MyForwarder";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint48",
            name: "deadline",
            type: "uint48",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct MyForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint48",
            name: "deadline",
            type: "uint48",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct MyForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600b81526020017f4d79466f72776172646572000000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001204630604051602001620000c595949392919062000163565b6040516020818303038152906040528051906020012060808181525050620001c0565b6000819050919050565b620000fd81620000e8565b82525050565b6000819050919050565b620001188162000103565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014b826200011e565b9050919050565b6200015d816200013e565b82525050565b600060a0820190506200017a6000830188620000f2565b620001896020830187620000f2565b620001986040830186620000f2565b620001a760608301856200010d565b620001b6608083018462000152565b9695505050505050565b608051610fb9620001dc600039600061038f0152610fb96000f3fe6080604052600436106100345760003560e01c806367b6ee8a146100395780637ecebe0014610069578063f28313e0146100a6575b600080fd5b610053600480360381019061004e919061071c565b6100e3565b6040516100609190610828565b60405180910390f35b34801561007557600080fd5b50610090600480360381019061008b91906108a8565b6102b2565b60405161009d91906108ee565b60405180910390f35b3480156100b257600080fd5b506100cd60048036038101906100c8919061071c565b6102ca565b6040516100da9190610924565b60405180910390f35b60606100f08484846102ca565b61012f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101269061099c565b60405180910390fd5b600160008086600001602081019061014791906108a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461019091906109eb565b925050819055506000808560200160208101906101ad91906108a8565b73ffffffffffffffffffffffffffffffffffffffff1686606001358760400135888060a001906101dd9190610a2e565b8a60000160208101906101f091906108a8565b60405160200161020293929190610b18565b60405160208183030381529060405260405161021e9190610b73565b600060405180830381858888f193505050503d806000811461025c576040519150601f19603f3d011682016040523d82523d6000602084013e610261565b606091505b5091509150816102a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029d90610bd6565b60405180910390fd5b80925050509392505050565b60006020528060005260406000206000915090505481565b6000807f791697d8ed5668ef0c144142e880c3f470cc17e05e4b3eb3392697050b16d20585600001602081019061030191906108a8565b86602001602081019061031491906108a8565b876040013588606001358960800160208101906103319190610c34565b8a8060a001906103419190610a2e565b60405161034f929190610c61565b60405180910390208b60c00135604051602001610373989796959493929190610cb1565b60405160208183030381529060405280519060200120905060007f0000000000000000000000000000000000000000000000000000000000000000826040516020016103c0929190610da7565b60405160208183030381529060405280519060200120905060006103e58287876104b9565b90508660000160208101906103fa91906108a8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614801561048757508660c0013560008089600001602081019061044a91906108a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b80156104ad57508660800160208101906104a19190610c34565b65ffffffffffff164211155b93505050509392505050565b60006105098484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610512565b90509392505050565b60006041825114610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054f90610e2a565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260001c11156105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290610e96565b60405180910390fd5b601b8160ff1614806105f05750601c8160ff16145b61062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062690610f02565b60405180910390fd5b600186828585604051600081526020016040526040516106529493929190610f3e565b6020604051602081039080840390855afa158015610674573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080fd5b600080fd5b600080fd5b600060e082840312156106ae576106ad610693565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126106dc576106db6106b7565b5b8235905067ffffffffffffffff8111156106f9576106f86106bc565b5b602083019150836001820283011115610715576107146106c1565b5b9250929050565b60008060006040848603121561073557610734610689565b5b600084013567ffffffffffffffff8111156107535761075261068e565b5b61075f86828701610698565b935050602084013567ffffffffffffffff8111156107805761077f61068e565b5b61078c868287016106c6565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156107d25780820151818401526020810190506107b7565b60008484015250505050565b6000601f19601f8301169050919050565b60006107fa82610798565b61080481856107a3565b93506108148185602086016107b4565b61081d816107de565b840191505092915050565b6000602082019050818103600083015261084281846107ef565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108758261084a565b9050919050565b6108858161086a565b811461089057600080fd5b50565b6000813590506108a28161087c565b92915050565b6000602082840312156108be576108bd610689565b5b60006108cc84828501610893565b91505092915050565b6000819050919050565b6108e8816108d5565b82525050565b600060208201905061090360008301846108df565b92915050565b60008115159050919050565b61091e81610909565b82525050565b60006020820190506109396000830184610915565b92915050565b600082825260208201905092915050565b7f496e76616c6964207369676e6174757265206f72206e6f6e6365000000000000600082015250565b6000610986601a8361093f565b915061099182610950565b602082019050919050565b600060208201905081810360008301526109b581610979565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f6826108d5565b9150610a01836108d5565b9250828201905080821115610a1957610a186109bc565b5b92915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610a4b57610a4a610a1f565b5b80840192508235915067ffffffffffffffff821115610a6d57610a6c610a24565b5b602083019250600182023603831315610a8957610a88610a29565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610ab78385610a91565b9350610ac4838584610a9c565b82840190509392505050565b60008160601b9050919050565b6000610ae882610ad0565b9050919050565b6000610afa82610add565b9050919050565b610b12610b0d8261086a565b610aef565b82525050565b6000610b25828587610aab565b9150610b318284610b01565b601482019150819050949350505050565b6000610b4d82610798565b610b578185610a91565b9350610b678185602086016107b4565b80840191505092915050565b6000610b7f8284610b42565b915081905092915050565b7f5461726765742063616c6c206661696c65640000000000000000000000000000600082015250565b6000610bc060128361093f565b9150610bcb82610b8a565b602082019050919050565b60006020820190508181036000830152610bef81610bb3565b9050919050565b600065ffffffffffff82169050919050565b610c1181610bf6565b8114610c1c57600080fd5b50565b600081359050610c2e81610c08565b92915050565b600060208284031215610c4a57610c49610689565b5b6000610c5884828501610c1f565b91505092915050565b6000610c6e828486610aab565b91508190509392505050565b6000819050919050565b610c8d81610c7a565b82525050565b610c9c8161086a565b82525050565b610cab81610bf6565b82525050565b600061010082019050610cc7600083018b610c84565b610cd4602083018a610c93565b610ce16040830189610c93565b610cee60608301886108df565b610cfb60808301876108df565b610d0860a0830186610ca2565b610d1560c0830185610c84565b610d2260e08301846108df565b9998505050505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000610d70600283610d2f565b9150610d7b82610d3a565b600282019050919050565b6000819050919050565b610da1610d9c82610c7a565b610d86565b82525050565b6000610db282610d63565b9150610dbe8285610d90565b602082019150610dce8284610d90565b6020820191508190509392505050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000610e14601f8361093f565b9150610e1f82610dde565b602082019050919050565b60006020820190508181036000830152610e4381610e07565b9050919050565b7f45434453413a20696e76616c6964207300000000000000000000000000000000600082015250565b6000610e8060108361093f565b9150610e8b82610e4a565b602082019050919050565b60006020820190508181036000830152610eaf81610e73565b9050919050565b7f45434453413a20696e76616c6964207600000000000000000000000000000000600082015250565b6000610eec60108361093f565b9150610ef782610eb6565b602082019050919050565b60006020820190508181036000830152610f1b81610edf565b9050919050565b600060ff82169050919050565b610f3881610f22565b82525050565b6000608082019050610f536000830187610c84565b610f606020830186610f2f565b610f6d6040830185610c84565b610f7a6060830184610c84565b9594505050505056fea2646970667358221220a84304b9cf474e1c1905f632ddf7138a116b25535ba8d8ce0ea480410da865ed64736f6c63430008140033";

type MyForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyForwarder__factory extends ContractFactory {
  constructor(...args: MyForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MyForwarder & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyForwarder__factory {
    return super.connect(runner) as MyForwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyForwarderInterface {
    return new Interface(_abi) as MyForwarderInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MyForwarder {
    return new Contract(address, _abi, runner) as unknown as MyForwarder;
  }
}

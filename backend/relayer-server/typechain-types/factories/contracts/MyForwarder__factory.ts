/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MyForwarder,
  MyForwarderInterface,
} from "../../contracts/MyForwarder";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint48",
            name: "deadline",
            type: "uint48",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct MyForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint48",
            name: "deadline",
            type: "uint48",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct MyForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600b81526020017f4d79466f72776172646572000000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001204630604051602001620000c595949392919062000163565b6040516020818303038152906040528051906020012060808181525050620001c0565b6000819050919050565b620000fd81620000e8565b82525050565b6000819050919050565b620001188162000103565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014b826200011e565b9050919050565b6200015d816200013e565b82525050565b600060a0820190506200017a6000830188620000f2565b620001896020830187620000f2565b620001986040830186620000f2565b620001a760608301856200010d565b620001b6608083018462000152565b9695505050505050565b608051610f14620001dc600039600061035c0152610f146000f3fe6080604052600436106100345760003560e01c806367b6ee8a146100395780637ecebe0014610069578063f28313e0146100a6575b600080fd5b610053600480360381019061004e9190610852565b6100e3565b604051610060919061095e565b60405180910390f35b34801561007557600080fd5b50610090600480360381019061008b91906109de565b61027f565b60405161009d9190610a24565b60405180910390f35b3480156100b257600080fd5b506100cd60048036038101906100c89190610852565b610297565b6040516100da9190610a5a565b60405180910390f35b60606100f0848484610297565b61012f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012690610ad2565b60405180910390fd5b600160008086600001602081019061014791906109de565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101909190610b21565b925050819055506000808560200160208101906101ad91906109de565b73ffffffffffffffffffffffffffffffffffffffff1686606001358760400135888060a001906101dd9190610b64565b6040516101eb929190610c06565b600060405180830381858888f193505050503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b509150915081610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610c6b565b60405180910390fd5b80925050509392505050565b60006020528060005260406000206000915090505481565b6000807f791697d8ed5668ef0c144142e880c3f470cc17e05e4b3eb3392697050b16d2058560000160208101906102ce91906109de565b8660200160208101906102e191906109de565b876040013588606001358960800160208101906102fe9190610cc9565b8a8060a0019061030e9190610b64565b60405161031c929190610c06565b60405180910390208b60c00135604051602001610340989796959493929190610d2d565b60405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000008260405160200161038d929190610df7565b60405160208183030381529060405280519060200120905060006103b2828787610486565b90508660000160208101906103c791906109de565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614801561045457508660c0013560008089600001602081019061041791906109de565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b801561047a575086608001602081019061046e9190610cc9565b65ffffffffffff164211155b93505050509392505050565b60006104d68484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104df565b90509392505050565b6000806000806104ef868661050b565b9250925092506104ff8282610567565b82935050505092915050565b600080600060418451036105505760008060006020870151925060408701519150606087015160001a9050610542888285856106cb565b955095509550505050610560565b60006002855160001b9250925092505b9250925092565b6000600381111561057b5761057a610e33565b5b82600381111561058e5761058d610e33565b5b03156106c757600160038111156105a8576105a7610e33565b5b8260038111156105bb576105ba610e33565b5b036105f2576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561060657610605610e33565b5b82600381111561061957610618610e33565b5b0361065e578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016106559190610a24565b60405180910390fd5b60038081111561067157610670610e33565b5b82600381111561068457610683610e33565b5b036106c657806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016106bd9190610e62565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561070b5760006003859250925092506107b5565b6000600188888888604051600081526020016040526040516107309493929190610e99565b6020604051602081039080840390855afa158015610752573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107a657600060016000801b935093509350506107b5565b8060008060001b935093509350505b9450945094915050565b600080fd5b600080fd5b600080fd5b600060e082840312156107e4576107e36107c9565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610812576108116107ed565b5b8235905067ffffffffffffffff81111561082f5761082e6107f2565b5b60208301915083600182028301111561084b5761084a6107f7565b5b9250929050565b60008060006040848603121561086b5761086a6107bf565b5b600084013567ffffffffffffffff811115610889576108886107c4565b5b610895868287016107ce565b935050602084013567ffffffffffffffff8111156108b6576108b56107c4565b5b6108c2868287016107fc565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156109085780820151818401526020810190506108ed565b60008484015250505050565b6000601f19601f8301169050919050565b6000610930826108ce565b61093a81856108d9565b935061094a8185602086016108ea565b61095381610914565b840191505092915050565b600060208201905081810360008301526109788184610925565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ab82610980565b9050919050565b6109bb816109a0565b81146109c657600080fd5b50565b6000813590506109d8816109b2565b92915050565b6000602082840312156109f4576109f36107bf565b5b6000610a02848285016109c9565b91505092915050565b6000819050919050565b610a1e81610a0b565b82525050565b6000602082019050610a396000830184610a15565b92915050565b60008115159050919050565b610a5481610a3f565b82525050565b6000602082019050610a6f6000830184610a4b565b92915050565b600082825260208201905092915050565b7f496e76616c6964207369676e6174757265206f72206e6f6e6365000000000000600082015250565b6000610abc601a83610a75565b9150610ac782610a86565b602082019050919050565b60006020820190508181036000830152610aeb81610aaf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2c82610a0b565b9150610b3783610a0b565b9250828201905080821115610b4f57610b4e610af2565b5b92915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610b8157610b80610b55565b5b80840192508235915067ffffffffffffffff821115610ba357610ba2610b5a565b5b602083019250600182023603831315610bbf57610bbe610b5f565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610bed8385610bc7565b9350610bfa838584610bd2565b82840190509392505050565b6000610c13828486610be1565b91508190509392505050565b7f5461726765742063616c6c206661696c65640000000000000000000000000000600082015250565b6000610c55601283610a75565b9150610c6082610c1f565b602082019050919050565b60006020820190508181036000830152610c8481610c48565b9050919050565b600065ffffffffffff82169050919050565b610ca681610c8b565b8114610cb157600080fd5b50565b600081359050610cc381610c9d565b92915050565b600060208284031215610cdf57610cde6107bf565b5b6000610ced84828501610cb4565b91505092915050565b6000819050919050565b610d0981610cf6565b82525050565b610d18816109a0565b82525050565b610d2781610c8b565b82525050565b600061010082019050610d43600083018b610d00565b610d50602083018a610d0f565b610d5d6040830189610d0f565b610d6a6060830188610a15565b610d776080830187610a15565b610d8460a0830186610d1e565b610d9160c0830185610d00565b610d9e60e0830184610a15565b9998505050505050505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000610de1600283610a75565b9150610dec82610dab565b602082019050919050565b60006060820190508181036000830152610e1081610dd4565b9050610e1f6020830185610d00565b610e2c6040830184610d00565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000602082019050610e776000830184610d00565b92915050565b600060ff82169050919050565b610e9381610e7d565b82525050565b6000608082019050610eae6000830187610d00565b610ebb6020830186610e8a565b610ec86040830185610d00565b610ed56060830184610d00565b9594505050505056fea26469706673582212209243b070db84c488dd7415a305ec91f20972e11903f59c7cbbfc87783ac7ed6064736f6c63430008140033";

type MyForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyForwarder__factory extends ContractFactory {
  constructor(...args: MyForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MyForwarder & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyForwarder__factory {
    return super.connect(runner) as MyForwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyForwarderInterface {
    return new Interface(_abi) as MyForwarderInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MyForwarder {
    return new Contract(address, _abi, runner) as unknown as MyForwarder;
  }
}
